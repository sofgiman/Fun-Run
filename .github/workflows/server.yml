name: Server Build

on:
  workflow_dispatch:  # Enables manual trigger
  push:
    branches:
      - main
      - feature/add-cicd
  pull_request:
    branches:
      - main

jobs:
#  build:
#    name: Build for ${{ matrix.targetPlatform }}
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          - os: windows
#            targetPlatform: StandaloneWindows64 # Build a Windows 64-bit standalone.
#          - os: ubuntu
#            targetPlatform: StandaloneLinux64 # Build a Linux 64-bit standalone.  
#    outputs:
#      targetPlatform: ${{ matrix.targetPlatform }}
#      os: ${{ matrix.os }}
#    steps:
#      # Checkout
#      - name: Checkout repository 
#        uses: actions/checkout@v4
#        with:
#          lfs: true
#          fetch-depth: 0  # Fetch all history for accurate git info
#
#      #  Cache:
#      - uses: actions/cache@v3
#        with:
#          path: Library
#          key: Library-Server-${{ matrix.targetPlatform }}
#          restore-keys: Library-
#
#      # Build
#      - name: Build Server
#        uses: game-ci/unity-builder@v4
#        env:
#          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
#          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
#        with:
#          projectPath: .
#          unityVersion: 6000.2.8f1
#          targetPlatform: ${{ matrix.targetPlatform }}
#          buildName: Fun Run Server
#          customParameters: -standaloneBuildSubtarget Server
#
#      # Output
#      - uses: actions/upload-artifact@v4
#        with:
#          name: Fun Run Server ${{ matrix.os }}
#          path: build/${{ matrix.targetPlatform }}
#
#
  dockerize:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Download Linux artifact (only for Linux build)
     # - name: Download Linux build artifact
     #   if: needs.build.outputs.targetPlatform == 'StandaloneLinux64'
     #   uses: actions/download-artifact@v4
     #   with:
     #     name: Fun Run Server ${{ needs.build.outputs.os }}
     #     path: ./build/StandaloneLinux64

      # Build Docker image
      - name: Build Docker image
        run: |
              # Lowercase GITHUB_REPOSITORY
              IMAGE_NAME_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
              
              # Build Docker image
              docker build -t ghcr.io/$IMAGE_NAME_LOWER/fun-run-server:latest -f docker/Linux/Dockerfile .

      # Optionally login and push to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
              # Lowercase GITHUB_REPOSITORY
              IMAGE_NAME_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
              docker push ghcr.io/$IMAGE_NAME_LOWER/fun-run-server:latest
